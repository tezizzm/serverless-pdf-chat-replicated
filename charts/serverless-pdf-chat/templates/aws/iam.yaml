apiVersion: iam.aws.upbound.io/v1beta1
kind: Role
metadata:
  name: {{ include "serverless-pdf-chat.fullname" . }}-lambda-role
  labels:
    {{- include "serverless-pdf-chat.labels" . | nindent 4 }}
spec:
  forProvider:
    name: {{ default (printf "%s-lambda-role" (include "serverless-pdf-chat.fullname" .)) .Values.aws.iam.roles.lambdaRole.name }}
    assumeRolePolicy: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        ]
      }
  providerConfigRef:
    name: {{ .Values.aws.providerConfigName }}

---
apiVersion: iam.aws.upbound.io/v1beta1
kind: RolePolicy
metadata:
  name: {{ include "serverless-pdf-chat.fullname" . }}-lambda-policy
  labels:
    {{- include "serverless-pdf-chat.labels" . | nindent 4 }}
spec:
  forProvider:
    role: {{ default (printf "%s-lambda-role" (include "serverless-pdf-chat.fullname" .)) .Values.aws.iam.roles.lambdaRole.name }}
    name: {{ default "lambda-execution-policy" .Values.aws.iam.roles.lambdaRole.policies.name }}
    policy: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "{{ include "serverless-pdf-chat.arn" (dict "service" "logs" "resource" "*") }}"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject",
              "s3:ListBucket"
            ],
            "Resource": [
              "{{ include "serverless-pdf-chat.arn" (dict "service" "s3" "resource" (include "serverless-pdf-chat.bucketName" .)) }}",
              "{{ include "serverless-pdf-chat.arn" (dict "service" "s3" "resource" (printf "%s/*" (include "serverless-pdf-chat.bucketName" .))) }}"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:GetItem",
              "dynamodb:PutItem",
              "dynamodb:UpdateItem",
              "dynamodb:DeleteItem",
              "dynamodb:Query",
              "dynamodb:Scan"
            ],
            "Resource": [
              "{{ include "serverless-pdf-chat.arn" (dict "service" "dynamodb" "region" .Values.aws.region "account" .Values.aws.accountId "resource" (printf "table/%s" (include "serverless-pdf-chat.documentTableName" .))) }}",
              "{{ include "serverless-pdf-chat.arn" (dict "service" "dynamodb" "region" .Values.aws.region "account" .Values.aws.accountId "resource" (printf "table/%s" (include "serverless-pdf-chat.memoryTableName" .))) }}"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "sqs:SendMessage",
              "sqs:ReceiveMessage",
              "sqs:DeleteMessage",
              "sqs:GetQueueAttributes"
            ],
            "Resource": "{{ include "serverless-pdf-chat.arn" (dict "service" "sqs" "region" .Values.aws.region "account" .Values.aws.accountId "resource" (include "serverless-pdf-chat.embeddingQueueName" .)) }}"
          },
          {
            "Effect": "Allow",
            "Action": [
              "bedrock:InvokeModel"
            ],
            "Resource": [
              "{{ include "serverless-pdf-chat.arn" (dict "service" "bedrock" "region" .Values.aws.region "resource" (printf "foundation-model/%s" .Values.application.config.embeddingModelId)) }}",
              "{{ include "serverless-pdf-chat.arn" (dict "service" "bedrock" "region" .Values.aws.region "resource" (printf "foundation-model/%s" .Values.application.config.modelId)) }}"
            ]
          }
        ]
      }
  providerConfigRef:
    name: {{ .Values.aws.providerConfigName }}
