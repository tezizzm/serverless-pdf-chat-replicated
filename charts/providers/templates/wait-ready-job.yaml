apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "providers.fullname" . }}-wait-ready
  labels: {{- include "providers.labels" . | nindent 4 }}
    app.kubernetes.io/component: cleanup
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "0"  # Run before provider config (weight 1)
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
    {{- include "providers.annotations" . | nindent 4 }}
spec:
  backoffLimit: 10
  template:
    metadata:
      name: {{ include "providers.fullname" . }}-wait-ready
    spec:
      serviceAccountName: {{ include "providers.serviceAccountName" . }}
      restartPolicy: OnFailure
      {{- with .Values.jobs.waitReadyJob.securityContext }}
      securityContext:
        runAsNonRoot: {{ .runAsNonRoot }}
        runAsUser: {{ .runAsUser }}
        runAsGroup: {{ .runAsGroup }}
      {{- end }}
      containers:
      - name: kubectl
        image: {{ include "providers.jobRegistry" . }}/{{ .Values.jobs.waitReadyJob.image.repository }}:{{ .Values.jobs.waitReadyJob.image.tag | default "latest" }}
        imagePullPolicy: {{ .Values.jobs.waitReadyJob.image.pullPolicy | default "IfNotPresent" }}
        {{- with .Values.jobs.waitReadyJob.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        command:
        - /bin/sh
        - -c
        - |
          echo "Waiting for all providers to be ready..."
          
          # Wait for all AWS providers to be ready
          {{- range $key, $value := .Values.aws.providers }}
          {{- if and (ne $key "registry") (ne $key "bedrock") (ne $key "cloudfront") (ne $key "secretsmanager") }}
          echo "Waiting for provider {{ include "providers.fullname" $ }}-aws-{{ $key }} to be ready..."
          kubectl wait --for=condition=Healthy provider.pkg.crossplane.io/{{ include "providers.fullname" $ }}-aws-{{ $key }} --timeout=300s
          if [ $? -ne 0 ]; then
            echo "Provider {{ include "providers.fullname" $ }}-aws-{{ $key }} failed to become ready within timeout"
            exit 1
          fi
          {{- end }}
          {{- end }}
          
          # Wait for Kubernetes provider to be ready
          echo "Waiting for provider {{ include "providers.fullname" $ }}-kubernetes to be ready..."
          kubectl wait --for=condition=Healthy provider.pkg.crossplane.io/{{ include "providers.fullname" $ }}-kubernetes --timeout=300s
          if [ $? -ne 0 ]; then
            echo "Provider {{ include "providers.fullname" $ }}-kubernetes failed to become ready within timeout"
            exit 1
          fi
          
          echo "All providers are ready!"
